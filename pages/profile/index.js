import Head from "next/head";
import React, { Fragment } from "react";
import { useSession, getSession } from "next-auth/react";
import { connectToDatabase } from "../../lib/db";
import Profile from "../../components/profile/profile";
import Posts from "../../components/profile/posts";

export default function ProfilePage({ user, posts }) {
  const { data: session } = useSession();

  if (session) {
    return (
      <div className="page bg-gray-900">
        <Head>
          <title>Profile</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/images/logo2.png" />
        </Head>

        <Profile user={user} />
        <Posts posts={posts} />
      </div>
    );
  }
  return (
    <Fragment>
      <div className="page bg-gray-900">
        <Head>
          <title>Profile</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/images/logo2.png" />
        </Head>

        <div className="p-8  grid place-items-center content-start min-h-screen">
          <p>Access Denied</p>
        </div>
      </div>
    </Fragment>
  );
}

export async function getServerSideProps(context) {
  const session = await getSession(context);

  if (session) {
    const client = await connectToDatabase();
    const db = client.db();

    const userData = await db
      .collection("users")
      .find({
        email: session.user.email,
      })
      .toArray();

    const user = userData.map((user) => ({
      _id: user._id,
      email: user.email,
      name: user.name,
      status: user.status,
      gender: user.gender,
      profilePic: user.profilePic,
    }));

    const postData = await db
      .collection("posts")
      .find({
        creator: user[0]._id,
      })
      .toArray();

    const posts = JSON.parse(JSON.stringify(postData));

    client.close();

    const users = JSON.parse(JSON.stringify(userData));
    // console.log("Users: ", users[0]);
    // console.log("Posts: ", posts);
    return {
      props: {
        user: users[0],
        posts: posts,
        session: session,
      },
    };
  } else {
    return {
      redirect: {
        destination: "/auth",
        permanent: false,
      },
    };
  }
}
